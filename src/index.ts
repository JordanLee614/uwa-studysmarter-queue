import { app, BrowserWindow, ipcMain, dialog, Menu } from 'electron';
import Store from 'electron-store';
import path from 'path';
import { formatDate } from './shared/utils'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const schema = {
  defaults: {
    app_state: {
      selected_id: undefined,
      queues: {
        studysmarter: [],
        librarian: [],
      }
    }
  },
}

// Disabling menubar for application (isn't used)
Menu.setApplicationMenu(null)

const store = new Store(schema);
let win: BrowserWindow | null;

ipcMain.on('QUEUE_UPDATED', (event, data) => {
  store.set('app_state', data);
});

ipcMain.handle('show-save', async (event, someArgument) => {
  const to = someArgument.to;
  const from = someArgument.from;
  const export_name = `/databasefrom${formatDate(from)}to${formatDate(to)}.csv`

  const result = await  dialog.showSaveDialog({
    title: 'Save As',
    defaultPath: path.join(app.getPath("downloads"), export_name),
    filters: [
        {
            name: 'csv',
            extensions: ['.csv']
        }, 
    ],
    properties: []
  })
  console.log(result)
  return result
})

ipcMain.handle('show-delete', async () => {
  const options = {
    type: "warning",
    title: "You are about to clear the database",
    buttons: ["Clear Database", "Cancel"],
    message: "Are you sure you want to clear the database? This action cannot be undone."
  }
  const result = await dialog.showMessageBox(options)
  console.log("result: ",result)
  return result
})

ipcMain.handle('fetch-store', async () => {
  return store.get('app_state')
})

const createWindow = (): void => {
  // Create the browser window.
  win = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      //enableRemoteModule: true,
      // preload: __dirname + '/preload.js'
    }
  });
  
  // and load the index.html of the app.
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  win.setTitle(require('./../package.json').productName);
  
  win.on('closed', () => {  
    win = null
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
